{
  "id": "elb",
  "unreleased": true,
  "displayName": "ELB Load Balancers",
  "category": "AWS",
  "categoryPriority": 100,
  "type": "elemental",
  "alertQuery": "_exists_:LoadBalancerName",
  "requiredProperties": [
    "LoadBalancerName"
  ],
  "idTemplate": "{{LoadBalancerName}}",
  "idName": "Load Balancer",
  "mtsQuery": "sf_metric:RequestCount AND sf_key:LoadBalancerName AND _exists_:LoadBalancerName",
  "systemDashboardPrefix": "ELB",
  "discoveryQuery": ["sf_key:LoadBalancerName"],
  "propertyColumns": [
    [
      {
        "header": "AWS",
        "properties": []
      }
    ],
    [
      {
        "header": "Tags",
        "properties": [
          "sf_tags"
        ]
      },
      {
        "header": "Other",
        "properties": []
      }
    ]
  ],
  "listColumns": [
    {
      "property": "id",
      "displayName": "ID",
      "format": "id"
    },
    {
      "property": "value",
      "displayName": "Value",
      "format": "Number"
    }
  ],
  "tooltipKeyList": [
    {
      "property": "id",
      "displayName": "ID",
      "isSummaryProperty": true
    },
    {
      "property": "value",
      "displayName": "Value",
      "isSummaryProperty": true,
      "format": "Number"
    }
  ],
  "metrics": [
    {
      "id": "aws.elb.requests",
      "type": "metric",
      "displayName": "Requests / Min",
      "metricSelectors": [
        "RequestCount"
      ],
      "description": "Requests per minute",
      "valueLabel": "Requests",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "RequestCount = data(\"RequestCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)",
        "varName": "RequestCount"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.http_errors",
      "type": "metric",
      "displayName": "ELB HTTP Errors",
      "metricSelectors": [
        "HTTPCode_ELB_4xx_Count",
        "HTTPCode_ELB_5xx_Count"
      ],
      "description": "HTTP 4XX and 5XX Error codes generated by the load balancer per minute",
      "valueLabel": "Request Errors / min",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "HTTP4ERRORS_CLASSIC1 = data(\"HTTPCode_ELB_4xx\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP4ERRORS_APPLICATION1 = data(\"HTTPCode_ELB_4xx_Count\", filter=filter(\"namespace\", \"AWS/ApplicationELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP_4xx_ERROR_SUM1  = (HTTP4ERRORS_CLASSIC1 + HTTP4ERRORS_APPLICATION1)\nHTTP5ERRORS_CLASSIC1 = data(\"HTTPCode_ELB_5xx\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP5ERRORS_APPLICATION1 = data(\"HTTPCode_ELB_5xx_Count\", filter=filter(\"namespace\", \"AWS/ApplicationELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP_5xx_ERROR_SUM1  = (HTTP5ERRORS_CLASSIC1 + HTTP5ERRORS_APPLICATION1)\nHTTP_ERROR_SUM  = (HTTP_4xx_ERROR_SUM1 + HTTP_5xx_ERROR_SUM1)",
        "varName": "HTTP_ERROR_SUM"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.unhealthy_host_percent",
      "type": "metric",
      "displayName": "Unhealthy Hosts %",
      "metricSelectors": [
        "HealthyHostCount"
      ],
      "description": "Unhealthy Hosts / (Healthy Hosts + Unhealthy Hosts). Under 5% is Green, 5-20% Yellow, above 20% is Red",
      "valueLabel": "Unhealthy Hosts %",
      "valueFormat": "Percentage",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "HEALTHY_HOST_COUNT = data(\"HealthyHostCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"])\nUNHEALTHY_HOST_COUNT = data(\"UnHealthyHostCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"])\nUNHEALTHY_HOST_PERCENT = (UNHEALTHY_HOST_COUNT / (UNHEALTHY_HOST_COUNT + HEALTHY_HOST_COUNT)) * 100",
        "varName": "UNHEALTHY_HOST_PERCENT"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "maxValue": 100,
        "range": [
          "#6bd37e",
          "#e2ed6a",
          "#e2ed6a",
          "#e2ed6a",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849",
          "#ea1849"
        ]
      }
    },
    {
      "id": "aws.elb.latency",
      "type": "metric",
      "displayName": "Latency (ms)",
      "metricSelectors": [
        "Latency"
      ],
      "description": "Total elapsed time from the load-balancer sends request to when host responds (HTTP) or connection is established (TCP)",
      "valueLabel": "Latency (ms)",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "LATENCY = data(\"Latency\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).mean(by=[\"LoadBalancerName\"]).scale(1000)",
        "varName": "LATENCY"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.surgequeuelength",
      "type": "metric",
      "displayName": "Surge Queue Length",
      "metricSelectors": [
        "SurgeQueueLength"
      ],
      "description": "Pending requests since load-balancer was unable to establish a connection with a healthy hos (max: 1024)",
      "valueLabel": "Surge Queue Length",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "SURGE_QUEUE_LENGTH = data(\"SurgeQueueLength\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).mean(by=[\"LoadBalancerName\"])",
        "varName": "SURGE_QUEUE_LENGTH"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "maxValue": 1024
      }
    },
    {
      "id": "aws.elb.http4errors",
      "type": "metric",
      "displayName": "ELB 4xx Errors",
      "metricSelectors": [
        "HTTPCode_ELB_4xx"
      ],
      "description": "Error codes generated by the load balancer when a request is malformed or incomplete per minute",
      "valueLabel": "4xx Errors / min",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "HTTP4ERRORS_CLASSIC = data(\"HTTPCode_ELB_4xx\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP4ERRORS_APPLICATION = data(\"HTTPCode_ELB_4xx_Count\", filter=filter(\"namespace\", \"AWS/ApplicationELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP_4xx_ERROR_SUM  = (HTTP4ERRORS_CLASSIC + HTTP4ERRORS_APPLICATION)",

        "varName": "HTTP_4xx_ERROR_SUM"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.http5errors",
      "type": "metric",
      "displayName": "ELB 5xx Errors",
      "metricSelectors": [
        "HTTPCode_ELB_5xx"
      ],
      "description": "Error codes generated when there are no healthy instances registered to the load balancer, or if the request rate exceeds the capacity of the instances (spillover) or the load balancer, per minute",
      "valueLabel": "5xx Errors / min",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "HTTP5ERRORS_CLASSIC = data(\"HTTPCode_ELB_5xx\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP5ERRORS_APPLICATION = data(\"HTTPCode_ELB_5xx_Count\", filter=filter(\"namespace\", \"AWS/ApplicationELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nHTTP_5xx_ERROR_SUM  = (HTTP5ERRORS_CLASSIC + HTTP5ERRORS_APPLICATION)",

        "varName": "HTTP_5xx_ERROR_SUM"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.healthyhostcount",
      "type": "metric",
      "displayName": "Healthy Hosts",
      "metricSelectors": [
        "HealthyHostCount"
      ],
      "description": "Number of Healthy Hosts",
      "valueLabel": "Healthy Hosts",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "HEALTHY_HOST_COUNT1 = data(\"HealthyHostCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"])",
        "varName": "HEALTHY_HOST_COUNT1"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.unhealthyhostcount",
      "type": "metric",
      "displayName": "UnHealthy Hosts",
      "metricSelectors": [
        "UnHealthyHostCount"
      ],
      "description": "Number of UnHealthy Hosts",
      "valueLabel": "UnHealthy Hosts",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "UNHEALTHY_HOST_COUNT1 = data(\"UnHealthyHostCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"mean\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"])",
        "varName": "UNHEALTHY_HOST_COUNT1"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.backendconnectionerrors",
      "type": "metric",
      "displayName": "Back-End Connection Errors",
      "metricSelectors": [
        "BackendConnectionErrors",
        "TargetConnectionErrorCount"
      ],
      "description": "Number of connections that were not successfully established between the load balancer and target",
      "valueLabel": "Errors / min",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "BACKEND_ERRORS_CLASSIC = data(\"BackendConnectionErrors\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nBACKEND_ERRORS_APPLICATION = data(\"TargetConnectionErrorCount\", filter=filter(\"namespace\", \"AWS/ApplicationELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)\nBACKEND_ERRORS_SUM  = (BACKEND_ERRORS_CLASSIC + BACKEND_ERRORS_APPLICATION)",
        "varName": "BACKEND_ERRORS_SUM"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.spillovercount",
      "type": "metric",
      "displayName": "Spillover Count",
      "metricSelectors": [
        "SpilloverCount"
      ],
      "description": "Requests that were rejected because the surge queue is full",
      "valueLabel": "Spill Over Count",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "SPILLOVER_COUNT = data(\"SpilloverCount\", filter=filter(\"namespace\", \"AWS/ELB\") and filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"])",
        "varName": "SPILLOVER_COUNT"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    },
    {
      "id": "aws.elb.host_http_responses",
      "type": "metric",
      "displayName": "Host HTTP Responses",
      "metricSelectors": [
        "HTTPCode_*"
      ],
      "description": "Total number of HTTP responses including 2XX, 3XX, 4XX, 5XX errors per minute",
      "valueLabel": "# Responses",
      "job": {
        "resolution": 300000,
        "filters": [],
        "template": "RESPONSES_SUM = data(\"HTTPCode_*\", filter=filter(\"stat\", \"sum\") and filter(\"LoadBalancerName\", \"*\"){{#filter}} and {{{filter}}}{{/filter}}, extrapolation=\"last_value\", maxExtrapolations=2).sum(by=[\"LoadBalancerName\"]).scale(60)",
        "varName": "RESPONSES_SUM"
      },
      "coloring": {
        "method": "quantile",
        "minValue": 0,
        "range": [
          "#bfd3e6",
          "#9ebcda",
          "#8c96c6",
          "#8856a7",
          "#810f7c"
        ]
      }
    }
  ]
}
